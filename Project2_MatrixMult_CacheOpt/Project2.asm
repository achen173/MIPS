# Alan Chen
# ECE 331 Project 2
# 11/20/2019

.data
    N: .word 1 # number of input vectors x
    M: .word 6 # number of features
    P: .word -56075 # weight vector is 1 dimensional
    learned_weight_vector: .word 49,15,6,630,0,1460 #**your learned weights here**
    x_data: .word
        125,256,6000,256,16,128
        29,8000,32000,32,8,32
        29,8000,32000,32,8,32
        29,8000,32000,32,8,32
        29,8000,16000,32,8,16
        26,8000,32000,64,8,32
        23,16000,32000,64,16,32
        23,16000,32000,64,16,32
        23,16000,64000,64,16,32
        23,32000,64000,128,32,64
        400,1000,3000,0,1,2
        400,512,3500,4,1,6
        60,2000,8000,65,1,8
        50,4000,16000,65,1,8
        350,64,64,0,1,4
        200,512,16000,0,4,32
        167,524,2000,8,4,15
        143,512,5000,0,7,32
        143,1000,2000,0,5,16
        110,5000,5000,142,8,64
        143,1500,6300,0,5,32
        143,3100,6200,0,5,20
        143,2300,6200,0,6,64
        110,3100,6200,0,6,64
        320,128,6000,0,1,12
        320,512,2000,4,1,3
        320,256,6000,0,1,6
        320,256,3000,4,1,3
        320,512,5000,4,1,5
        320,256,5000,4,1,6
        25,1310,2620,131,12,24
        25,1310,2620,131,12,24
        50,2620,10480,30,12,24
        50,2620,10480,30,12,24
        56,5240,20970,30,12,24
        64,5240,20970,30,12,24
        50,500,2000,8,1,4
        50,1000,4000,8,1,5
        50,2000,8000,8,1,5
        50,1000,4000,8,3,5
        50,1000,8000,8,3,5
        50,2000,16000,8,3,5
        50,2000,16000,8,3,6
        50,2000,16000,8,3,6
        133,1000,12000,9,3,12
        133,1000,8000,9,3,12
        810,512,512,8,1,1
        810,1000,5000,0,1,1
        320,512,8000,4,1,5
        200,512,8000,8,1,8
        700,384,8000,0,1,1
        700,256,2000,0,1,1
        140,1000,16000,16,1,3
        200,1000,8000,0,1,2
        110,1000,4000,16,1,2
        110,1000,12000,16,1,2
        220,1000,8000,16,1,2
        800,256,8000,0,1,4
        800,256,8000,0,1,4
        800,256,8000,0,1,4
        800,256,8000,0,1,4
        800,256,8000,0,1,4
        125,512,1000,0,8,20
        75,2000,8000,64,1,38
        75,2000,16000,64,1,38
        75,2000,16000,128,1,38
        90,256,1000,0,3,10
        105,256,2000,0,3,10
        105,1000,4000,0,3,24
        105,2000,4000,8,3,19
        75,2000,8000,8,3,24
        75,3000,8000,8,3,48
        175,256,2000,0,3,24
        300,768,3000,0,6,24
        300,768,3000,6,6,24
        300,768,12000,6,6,24
        300,768,4500,0,1,24
        300,384,12000,6,1,24
        300,192,768,6,6,24
        180,768,12000,6,1,31
        330,1000,3000,0,2,4
        300,1000,4000,8,3,64
        300,1000,16000,8,2,112
        330,1000,2000,0,1,2
        330,1000,4000,0,3,6
        140,2000,4000,0,3,6
        140,2000,4000,0,4,8
        140,2000,4000,8,1,20
        140,2000,32000,32,1,20
        140,2000,8000,32,1,54
        140,2000,32000,32,1,54
        140,2000,32000,32,1,54
        140,2000,4000,8,1,20
        57,4000,16000,1,6,12
        57,4000,24000,64,12,16
        26,16000,32000,64,16,24
        26,16000,32000,64,8,24
        26,8000,32000,0,8,24
        26,8000,16000,0,8,16
        480,96,512,0,1,1
        203,1000,2000,0,1,5
    
    predictions: .space 400
.text
main:
    # Store M, N, P in $a? registers
    lw $a0, N
    lw $a1, M
    lw $a2, P
    jal multiply
    ori $v0,$0,10 # end program gracefully
    syscall
multiply:
    # Register usage:
    # n is $s0, m is $s1, p is $s2,
    # r is $s3, c is $s4, i is $s5,
    # sum is $s6
    # Prologue
    sw $fp, -4($sp)
    la $fp, -4($sp)
    sw $ra, -4($fp)
    sw $s0, -8($fp)
    sw $s1, -12($fp)
    sw $s2, -16($fp)
    sw $s3, -20($fp)
    sw $s4, -24($fp)
    sw $s5, -28($fp)
    sw $s6, -32($fp)
    addi $sp, $sp, -36
    # Save arguments
    move $s0, $a0 # n
    move $s1, $a1 # m
    move $s2, $a2 # p
    li $s3, 0 # r = 0
    li $t0, 4 # sizeof(Int)
    ##############################
    # lw $s2, M # array length
    la $s1, x_data
    addi $s2, $zero, 0 # predictions array counter
    addi $s3, $zero, 0 # entire 100 rows counter
    addi $s7, $zero, 0 # resultant
    la $s4, learned_weight_vector
    lw $s5, P
OuterLoop:
    beq $s3, 100, mult_end
    addi $s6, $zero, 0 # inner loop 6 data counter
    addi $s7, $zero, 0
Mine:
    lw $t0, ($s1)   # the 6 input numbers
    lw $t1, ($s4)   # the 6 weights
    mult $t0, $t1
    mflo $t0
    add $s7, $s7, $t0
    addi $s1, $s1, 4
    addi $s4, $s4, 4
    addi $s6, $s6, 4
    beq $s6, 24, EndOuterLoop   # 6*4 = 24 -> 6 loops
    j Mine 
EndOuterLoop:
    add $s7, $s7, $s5
    addi $t3, $zero, 1000
    div $s7, $t3
    mflo $v0 # quotient to $v0
    sw $v0, predictions($s2)
    addi $s2, $s2, 4
    addi $s3, $s3, 1
    la $s4, learned_weight_vector
    j OuterLoop
mult_end:
    # Epilogue
    lw $ra, -4($fp)
    lw $s0, -8($fp)
    lw $s1, -12($fp)
    lw $s2, -16($fp)
    lw $s3, -20($fp)
    lw $s4, -24($fp)
    lw $s5, -28($fp)
    lw $s6, -32($fp)
    la $sp, 4($fp)
    lw $fp, ($fp)
    jr $ra
